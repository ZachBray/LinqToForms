{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Library for composing WPF forms with validation using LINQ in C#.","name":"LinqToForms","body":"# LinqToForms\r\n\r\n## Overview\r\n\r\n* LinqToForms is a *library* for composing [WPF](http://en.wikipedia.org/wiki/Windows_Presentation_Foundation) forms using [LINQ](http://msdn.microsoft.com/en-us/library/bb397926.aspx).\r\n* It only helps you build a `ViewModel`. It doesn't generate a `View`. Although this is something you could easily do yourself.\r\n* It works with [XAML](http://msdn.microsoft.com/en-us/library/ms752059.aspx).\r\n* It is a *toy* project and hasn't been well tested yet.\r\n\r\n## Goals\r\n* To make the construction of forms using [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel) feel more natural.\r\n* To simplify `ViewModel` validation logic by removing things like mutable state.\r\n* To make it possible to compose forms.\r\n\r\n## Structure\r\n#### Formlets\r\nTomas Petricek wrote a great blog entry [here](http://tomasp.net/blog/formlets-in-linq.aspx) on *formlets*. The basic idea is that *a formlet represents part of a form*. For example, a text field or an address section. Also, *a formlet can include other formlets*. For example, a company formlet might include an address formlet.\r\n\r\n###### Construction and validation\r\n\r\nThe code below demonstrates how you might construct an address formlet with LinqToForms.\r\n\r\n      public IFormlet<Address> Create()\r\n      {\r\n         var postCodeRegex = new Regex(@\"[A-Za-z]+[0-9]+\\s+[0-9]+[A-Za-z]+\");\r\n\r\n         return from firstLine in Formlet.Text(\"First Line\")\r\n                from secondLine in Formlet.Text(\"Second Line\")\r\n                from postCode in Formlet.Text(\"Post Code\")\r\n                where firstLine != \"\"\r\n                where secondLine != \"\"\r\n                where postCodeRegex.IsMatch(postCode)\r\n                select new Address(firstLine, secondLine, postCode);\r\n      }\r\n\r\nIn the first three lines from the `return` statement we declare some text fields that should be available on the address form using the `from` operation. We pass a `string` into the `Fomlet.Text(string id)` method for each field. Later we will use these `string` values as keys into a dictionary of fields so that we can interact with the form from XAML.\r\n\r\nThe lines starting with `where` clauses constitute the validation logic for the formlet. Here we check that the \"First Line\" and \"Second Line\" fields are filled and that the \"Post Code\" field matches a regular expression.\r\n\r\n###### Composition\r\n\r\nThe code below demonstrates how you might construct a company formlet that makes use of the address formlet above.\r\n\r\n      public IFormlet<Company> Create()\r\n      {\r\n         return from name in Formlet.Text(\"Name\")\r\n                from address in new AddressFormletFactory().Create()\r\n                where name != \"\"\r\n                select new Company(name, address);\r\n      }\r\n \r\nOnce again we declare a field, \"Name\", that we expect in the form. In the following line we use the `from` operation again but this time to import a child formlet and all of its validation logic. The `address` variable has the type `Address` and it is used in the construction of a new `Company` instance.\r\n\r\n**Note: At present, LinqToForms only supports `where` clauses after all fields have been declared.** This includes where clauses in child formlets. This needs to be fixed. It limits composability.\r\n\r\n#### Forms and ViewModels\r\n\r\nThe value of a formlet changes over time. More specifically, it changes when the user updates a field in the form. Furthermore, any change in a child formlet propagates to its parents. For example, when a user changes the \"First Line\" field in the \"Address Section\" the address formlet produces a new `Address` instance if it passes validation. This new `Address` causes the company formlet to produce a new `Company` instance with an updated `Address` field.\r\n\r\nA `Form` is wrapper around a formlet. It listens to the formlet values over time and provides a command for submitting the current value of the formlet. This command is only executable when the formlet passes validation. It also exposes a dictionary from identifier to form field. This allows the view to interact with the form values.\r\n\r\nBelow is an example of a form for the company formlet.\r\n\r\n   \tclass CompanyForm : Form<Company>\r\n   \t{\r\n      \tpublic CompanyForm(string submitAction, Action<Company> onSubmit, Action onCancel) \r\n         : base(submitAction, onSubmit, onCancel)\r\n      \t{\r\n         \tDefinition = new CompanyFormletFactory().Create();\r\n      \t}\r\n   \t}\r\n\r\nWe assign the formlet to the `Definition` property of the `Form` sub type. In the constructor of `Form` we pass in several arguments. The `submitAction` argument is the label we give the submit button on the form, e.g., \"Update Company\" or \"Add Company\". The `onSubmit` argument is a continuation for when the user submits a validated form.\r\n\r\n#### Views\r\n\r\n###### Text field bindings\r\n\r\n\t\t<Label Grid.Column=\"0\">Name</Label>\r\n\t\t<TextBox Grid.Column=\"1\" Text=\"{Binding Fields[Name].Value, Mode=TwoWay}\" />\r\n\r\n* `Name` is the identifier provided in the formlet for the field.\r\n\r\n###### Int/decimal field bindings\r\n\r\n\t\t<Label Grid.Column=\"0\">Age</Label>\r\n \t\t<xctk:IntegerUpDown Grid.Column=\"1\"\r\n\t\t\tValue=\"{Binding Fields[Age].Value, Mode=TwoWay}\" \r\n\t\t\tIncrement=\"{Binding Fields[Age].Stepping}\" \r\n\t\t\tMaximum=\"{Binding Fields[Age].MaxValue}\" \r\n\t\t\tMinimum=\"{Binding Fields[Age].MinValue}\" />\r\n\r\n* `Age` is the identifier provided in the formlet for the field.\r\n* The initial `Value`, `Stepping`, `Minimum` and `Maximum` can be defined in the formlet. See the `UserFormletFactory` in the example project.\r\n\r\n###### Other field bindings\r\n\r\nFeel free to add more and send us a pull request.\r\n\r\n## Gotchas\r\n* Where clause problem. See **bold** note above.\r\n* Identifier re-use (in child formlets) is not supported.\r\n* Probably some other stuff too!\r\n\r\n## Copyright and license\r\n   Copyright 2012 Zachary Bray. \r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n","google":"UA-36398955-1"}